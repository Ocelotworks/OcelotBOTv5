stages:
  - build-base
  - release
  - build
  - post-release


#build-consumer-image:
#  stage: build
#  except:
#    refs:
#      - tags
#  only:
#    changes:
#      - consumers/image.js
#    refs:
#      - master
#  tags:
#    - shell
#  retry:
#    max: 2
#    when: runner_system_failure
#  before_script:
#    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD https://$REGISTRY
#  script:
#    - echo $CI_PIPELINE_IID
#    - docker pull $REGISTRY/ocelotbotv5/image-consumer:latest || true
#    - docker build -f ImageProcessor.Dockerfile . --cache-from $REGISTRY/ocelotbotv5/image-consumer:latest
#      -t $REGISTRY/ocelotbotv5/image-consumer:$CI_PIPELINE_ID
#      -t $REGISTRY/ocelotbotv5/image-consumer:latest
#      --build-arg VERSION=$CI_PIPELINE_IID
#    - docker push $REGISTRY/ocelotbotv5/image-consumer:latest
#    #    - docker push $REGISTRY_MIRROR/ocelotbotv5/image-consumer:latest
#    - docker image rm $REGISTRY/ocelotbotv5/image-consumer:latest
#    - docker image rm $REGISTRY/ocelotbotv5/image-consumer:$CI_PIPELINE_ID
##    - curl -X POST $DEPLOY_WEBHOOK


build-base-image-master:
  environment:
    name: production
  only:
    changes:
      - package.json
      - package-lock.json
      - BaseImage.Dockerfile
    refs:
      - master
  extends: .build-base-image

build-base-image-staging:
  environment:
    name: staging
  only:
    changes:
      - package.json
      - package-lock.json
      - BaseImage.Dockerfile
    refs:
      - staging
  extends: .build-base-image

build-base-image-goblin:
  environment:
    name: production
  only:
    changes:
      - package.json
      - package-lock.json
      - BaseImage.Dockerfile
    refs:
      - goblin
  extends: .build-base-image

.build-base-image:
  stage: build-base
  except:
    refs:
      - tags
  tags:
    - shell
  retry:
    max: 2
    when: runner_system_failure
  before_script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD https://$REGISTRY
  script:
    - docker pull $REGISTRY/ocelotbotv5/ocelotbot-base:latest-$CI_COMMIT_BRANCH || true
    - docker build -f BaseImage.Dockerfile . --cache-from $REGISTRY/ocelotbotv5/ocelotbot-base:latest-$CI_COMMIT_BRANCH
      -t $REGISTRY/ocelotbotv5/ocelotbot-base:latest-$CI_COMMIT_BRANCH
      --build-arg REGISTRY=$REGISTRY
      --build-arg CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
      --build-arg VERSION=$CI_PIPELINE_IID
    - docker push $REGISTRY/ocelotbotv5/ocelotbot-base:latest-$CI_COMMIT_BRANCH
    - docker image rm $REGISTRY/ocelotbotv5/ocelotbot-base:latest-$CI_COMMIT_BRANCH

build-shard-staging:
  environment:
    name: staging
  only:
    - staging
  extends: .build-shard
  before_script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD https://$REGISTRY
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD http://$REGISTRY_MIRROR || true
#    - export VERSION=$CI_PIPELINE_IID
    - export VERSION=$(cat .next-version)

build-shard-master:
  environment:
    name: production
  only:
    - master
  extends: .build-shard
  before_script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD https://$REGISTRY
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD http://$REGISTRY_MIRROR || true
    - export VERSION=$(cat .next-version)

build-shard-goblin:
  environment:
    name: production
  only:
    - goblin
  extends: .build-shard
  before_script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD https://$REGISTRY
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD http://$REGISTRY_MIRROR || true
    - export VERSION=$(cat .next-version)


.build-shard:
  stage: build
  except:
    refs:
      - tags
  tags:
    - shell
    - zerotier
  retry:
    max: 2
    when: runner_system_failure
  script:
    - mv $CONFIG config/local.json
    - docker build .
      -t $REGISTRY/ocelotbotv5/ocelotbot:latest-$CI_COMMIT_BRANCH
      -t $REGISTRY_MIRROR/ocelotbotv5/ocelotbot:latest-$CI_COMMIT_BRANCH
      --build-arg REGISTRY=$REGISTRY
      --build-arg CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
      --build-arg VERSION=$VERSION
    - docker push $REGISTRY/ocelotbotv5/ocelotbot:latest-$CI_COMMIT_BRANCH
    - docker push $REGISTRY_MIRROR/ocelotbotv5/ocelotbot:latest-$CI_COMMIT_BRANCH || true
    - docker image rm $REGISTRY_MIRROR/ocelotbotv5/ocelotbot:latest-$CI_COMMIT_BRANCH
    - docker image rm $REGISTRY/ocelotbotv5/ocelotbot:latest-$CI_COMMIT_BRANCH
    - curl -X POST $BOT_DEPLOY_WEBHOOK

sentry-staging:
  only:
    - staging
  environment:
    name: staging
  extends: .sentry
  before_script:
#    - export VERSION=$CI_PIPELINE_IID
    - export VERSION=$(cat .next-version)

sentry-master:
  only:
    - master
  environment:
    name: production
  before_script:
    - export VERSION=$(cat .next-version)
  extends: .sentry

.sentry:
  stage: post-release
  image: getsentry/sentry-cli
  only:
    refs:
      - master
      - development
  except:
    variables:
      - $STAGE_SENTRY_DEPLOY == "false"
      - $STAGE_DEPLOY == "false"
  script:
    - sentry-cli releases new "$VERSION"
    - sentry-cli releases set-commits "$VERSION" --auto || true
    - sentry-cli releases finalize "$VERSION"
    - sentry-cli releases deploys "$VERSION" new -e $CI_ENVIRONMENT_NAME


version:
  stage: release
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  interruptible: true
  artifacts:
    paths:
      - .next-version
      - CHANGELOG.md
  script:
    - release next-version --allow-current > .next-version
    - cat .next-version
    - release changelog || true
    - release tag || true
  only:
    - master
    - staging
  except:
    - tags

release-monitor-master:
  extends: .release-monitor
  environment:
    name: production
  only:
    - master
release-monitor-staging:
  extends: .release-monitor
  environment:
    name: staging
  only:
    - staging

.release-monitor:
  only:
    - master
    - staging
  except:
    - tags
  interruptible: true
  image: node:lts-alpine3.12
  stage: post-release
  script:
    - export TARGET_VERSION=$(cat .next-version)
    - rm package.json
    - rm package-lock.json
    - npm install axios --production --registry=http://192.168.1.145/
    - node update.js
